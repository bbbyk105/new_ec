generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          UserRole  @default(ADMIN)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  phone       String?
  dateOfBirth DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addresses   Address[]
  orders      Order[]

  @@map("customers")
}

model Address {
  id         String   @id @default(cuid())
  customerId String
  name       String
  zipCode    String
  prefecture String
  city       String
  address1   String
  address2   String?
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@map("addresses")
}

model Category {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String?
  imageUrl      String?
  isActive      Boolean         @default(true)
  sortOrder     Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categorySales CategorySales[]
  products      Product[]

  @@map("categories")
}

model Product {
  id                String         @id @default(cuid())
  name              String
  description       String?
  price             Decimal        @db.Decimal(10, 2)
  costPrice         Decimal?       @db.Decimal(10, 2)
  sku               String?        @unique
  imageUrl          String?
  images            String[]
  stock             Int            @default(0)
  lowStockThreshold Int            @default(10)
  isActive          Boolean        @default(true)
  categoryId        String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  orderItems        OrderItem[]
  category          Category       @relation(fields: [categoryId], references: [id])
  stockHistory      StockHistory[]

  @@map("products")
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  customerId      String
  addressId       String
  status          OrderStatus    @default(PENDING)
  subtotal        Decimal        @db.Decimal(10, 2)
  shippingFee     Decimal        @default(0) @db.Decimal(10, 2)
  tax             Decimal        @default(0) @db.Decimal(10, 2)
  total           Decimal        @db.Decimal(10, 2)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus  @default(PENDING)
  notes           String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orderItems      OrderItem[]
  shippingAddress Address        @relation(fields: [addressId], references: [id])
  customer        Customer       @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model DailySales {
  id            String   @id @default(cuid())
  date          DateTime @unique @db.Date
  totalSales    Decimal  @db.Decimal(12, 2)
  totalOrders   Int
  totalItems    Int
  avgOrderValue Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("daily_sales")
}

model CategorySales {
  id         String   @id @default(cuid())
  date       DateTime @db.Date
  categoryId String
  sales      Decimal  @db.Decimal(10, 2)
  orders     Int
  items      Int
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([date, categoryId])
  @@map("category_sales")
}

model StockHistory {
  id          String          @id @default(cuid())
  productId   String
  type        StockChangeType
  quantity    Int
  reason      String?
  beforeStock Int
  afterStock  Int
  orderId     String?
  createdAt   DateTime        @default(now())
  product     Product         @relation(fields: [productId], references: [id])

  @@map("stock_history")
}

enum UserRole {
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  COD
  CONVENIENCE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum StockChangeType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  DAMAGE
}
